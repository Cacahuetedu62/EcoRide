<?php
require_once('templates/header.php');
error_reporting(E_ALL);
ini_set('display_errors', 1);
?>

    <div class="audit-container">
        <?php
        // Connexion √† la base de donn√©es
        try {
            $host = 'localhost';
            $dbname = 'ecoride';
            $utilisateur = 'root';
            $pass = 'MattLi2024!!';
            $port = 3306;

            $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8mb4", $utilisateur, $pass);
            echo "<div class='audit-header'>‚úÖ Connexion √† la base de donn√©es r√©ussie !</div>";
        } catch (PDOException $e) {
            die("<div class='audit-error'><h2>‚ùå Erreur de connexion :</h2> <p>" . $e->getMessage() . "</p></div>");
        }

        echo "<div class='row'>
            <div class='col-12'>
                <h3>üîç V√©rification des donn√©es et de l'int√©grit√© des tables</h3>
                <p>Voici un r√©sum√© des v√©rifications effectu√©es sur la base de donn√©es. Chaque cat√©gorie indique si les v√©rifications ont r√©ussi ou non.</p>
            </div>
        </div>";

        echo "<div class='row m-4'>";

        // V√©rification des tables
        echo "<div class='col-12 mb-3'>";
        echo "<div class='card audit-status audit-success'>";
        echo "<div class='card-body'>";
        echo "<h4>üìã Tables disponibles :</h4>";
        $tableList = $pdo->query("SHOW TABLES")->fetchAll(PDO::FETCH_COLUMN);
        foreach ($tableList as $table) {
            echo "<p>$table</p>";
        }
        echo "</div></div>";
        echo "</div>";

        // V√©rification de l'int√©grit√© des donn√©es
        echo "<div class='col-12 mb-3'>";
        echo "<div class='card audit-status audit-success'>";
        echo "<div class='card-body'>";
        echo "<h4>üõ† V√©rification de l'int√©grit√© des donn√©es :</h4>";
        $query = "SELECT r.id FROM reservations r LEFT JOIN utilisateurs u ON r.utilisateur_id = u.id WHERE u.id IS NULL";
        $invalidReservations = $pdo->query($query)->fetchAll();
        if (!empty($invalidReservations)) {
            echo "<p class='audit-error'>‚ùå Attention : R√©servations invalides d√©tect√©es.</p>";
        } else {
            echo "<p class='audit-success'>‚úÖ Toutes les r√©servations sont valides.</p>";
        }
        echo "</div></div>";
        echo "</div>";

        // V√©rification des colonnes obligatoires
        echo "<div class='col-12 mb-3'>";
        echo "<div class='card audit-status audit-success'>";
        echo "<div class='card-body'>";
        echo "<h4>üõ† V√©rification des colonnes obligatoires :</h4>";
        $tableColumns = [
            'utilisateurs' => ['id', 'nom', 'email'],
            'trajets' => ['id', 'lieu_depart', 'lieu_arrive', 'date_depart'],
            'reservations' => ['id', 'utilisateur_id', 'trajet_id']
        ];

        $allColumnsOk = true;
        foreach ($tableColumns as $table => $columns) {
            $query = "SHOW COLUMNS FROM $table";
            $existingColumns = $pdo->query($query)->fetchAll(PDO::FETCH_COLUMN);

            foreach ($columns as $column) {
                if (!in_array($column, $existingColumns)) {
                    echo "<p class='audit-error'>‚ùå La colonne <b>$column</b> est absente de la table <b>$table</b>.</p>";
                    $allColumnsOk = false;
                }
            }
        }

        if ($allColumnsOk) {
            echo "<p class='audit-success'>‚úÖ Toutes les colonnes sont pr√©sentes.</p>";
        }
        echo "</div></div>";
        echo "</div>";

        // V√©rification des cl√©s √©trang√®res
        echo "<div class='col-12 mb-3'>";
        echo "<div class='card audit-status audit-success'>";
        echo "<div class='card-body'>";
        echo "<h4>üîó V√©rification des cl√©s √©trang√®res :</h4>";
        $foreignKeyChecks = [
            'reservations' => ['utilisateur_id' => 'utilisateurs', 'trajet_id' => 'trajets']
        ];

        $allKeysOk = true;
        foreach ($foreignKeyChecks as $table => $checks) {
            foreach ($checks as $column => $referencedTable) {
                $query = "SELECT $table.id FROM $table LEFT JOIN $referencedTable ON $table.$column = $referencedTable.id WHERE $referencedTable.id IS NULL";
                $orphans = $pdo->query($query)->fetchAll();

                if (!empty($orphans)) {
                    echo "<p class='audit-error'>‚ùå Cl√©s √©trang√®res orphelines d√©tect√©es dans <b>$table</b> (colonne <b>$column</b>).</p>";
                    $allKeysOk = false;
                }
            }
        }

        if ($allKeysOk) {
            echo "<p class='audit-success'>‚úÖ Toutes les cl√©s √©trang√®res sont valides.</p>";
        }
        echo "</div></div>";
        echo "</div>";

        // V√©rification des valeurs NULL interdites
        echo "<div class='col-12 mb-3'>";
        echo "<div class='card audit-status audit-success'>";
        echo "<div class='card-body'>";
        echo "<h4>üö® V√©rification des valeurs NULL interdites :</h4>";
        $notNullChecks = [
            'utilisateurs' => ['nom', 'email'],
            'trajets' => ['lieu_depart', 'lieu_arrive', 'date_depart']
        ];

        $allNotNullOk = true;
        foreach ($notNullChecks as $table => $columns) {
            foreach ($columns as $column) {
                $query = "SELECT COUNT(*) FROM $table WHERE $column IS NULL";
                $stmt = $pdo->prepare($query);
                $stmt->execute();
                $count = $stmt->fetchColumn();

                if ($count > 0) {
                    echo "<p class='audit-error'>‚ùå Il y a <b>$count</b> enregistrements NULL dans la colonne <b>$column</b> de <b>$table</b>.</p>";
                    $allNotNullOk = false;
                }
            }
        }

        if ($allNotNullOk) {
            echo "<p class='audit-success'>‚úÖ Aucune valeur NULL n'est pr√©sente dans les colonnes.</p>";
        }
        echo "</div></div>";
        echo "</div>";

        // V√©rification des emails invalides
        echo "<div class='col-12 mb-3'>";
        echo "<div class='card audit-status audit-success'>";
        echo "<div class='card-body'>";
        echo "<h4>üìß V√©rification des emails invalides :</h4>";
        $query = "SELECT id, email FROM utilisateurs WHERE email NOT LIKE '%@%.%'";
        $invalidEmails = $pdo->query($query)->fetchAll();

        if (!empty($invalidEmails)) {
            echo "<p class='audit-error'>‚ùå Certains emails sont invalides :</p><ul>";
            foreach ($invalidEmails as $row) {
                echo "<li>ID: {$row['id']}, Email: {$row['email']}</li>";
            }
            echo "</ul>";
        } else {
            echo "<p class='audit-success'>‚úÖ Tous les emails sont valides.</p>";
        }
        echo "</div></div>";
        echo "</div>";

        try {
            // V√©rification des index
            echo "<div class='col-12 mb-3'>";
            echo "<div class='card audit-status audit-success'>";
            echo "<div class='card-body'>";
            echo "<h3>üîç V√©rification des index sur les colonnes fr√©quemment utilis√©es :</h3>";

            $indexChecks = [
                'utilisateurs' => ['id', 'email'],
                'trajets' => ['id', 'lieu_depart', 'prix_personnes'],
                'reservations' => ['id', 'utilisateur_id', 'trajet_id']
            ];

            foreach ($indexChecks as $table => $columns) {
                foreach ($columns as $column) {
                    $stmt = $pdo->prepare("SHOW INDEX FROM $table WHERE Column_name = :column");
                    $stmt->execute(['column' => $column]);
                    $indexes = $stmt->fetchAll();

                    if (empty($indexes)) {
                        echo "<p class='audit-error'>‚ùå Pas d'index trouv√© sur la colonne <b>$column</b> de la table <b>$table</b>.</p>";
                        echo "<p class='audit-suggestion'>üí° Suggestion: <code>CREATE INDEX idx_{$column} ON {$table}({$column});</code></p>";
                    } else {
                        echo "<p class='audit-success'>‚úÖ Index trouv√© sur la colonne <b>$column</b> de la table <b>$table</b>.</p>";
                    }
                }
            }
            echo "</div></div>";
            echo "</div>";

            // Analyse de la taille des tables
            echo "<div class='col-12 mb-3'>";
            echo "<div class='card audit-status audit-success'>";
            echo "<div class='card-body'>";
            echo "<h3>üìä Analyse de la taille des tables :</h3>";

            $stmt = $pdo->query("SELECT
                TABLE_NAME as table_name,
                ROUND(((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024), 2) as size_MB
                FROM information_schema.TABLES
                WHERE TABLE_SCHEMA = 'ecoride'
                AND TABLE_TYPE = 'BASE TABLE'");

            $tableSizes = $stmt->fetchAll();

            foreach ($tableSizes as $tableSize) {
                echo "<p>üìå La table <b>{$tableSize['table_name']}</b> occupe <b>{$tableSize['size_MB']} MB</b>.</p>";
            }
            echo "</div></div>";
            echo "</div>";

            // Information sur les trajets pass√©s
            echo "<div class='col-12 mb-3'>";
            echo "<div class='card audit-status audit-success'>";
            echo "<div class='card-body'>";
            echo "<h3>üìÖ Information sur les trajets :</h3>";

            $stmt = $pdo->query("SELECT
                COUNT(*) as count,
                MIN(date_depart) as oldest_date,
                MAX(date_depart) as newest_date,
                COUNT(CASE WHEN date_depart < DATE_SUB(NOW(), INTERVAL 1 MONTH) THEN 1 END) as old_trips
                FROM trajets
                WHERE date_depart < NOW()");

            $dateInfo = $stmt->fetch();

            if ($dateInfo['count'] > 0) {
                echo "<p class='audit-info'>‚ÑπÔ∏è Statistiques des trajets pass√©s :</p>";
                echo "<ul>";
                echo "<li>Nombre total de trajets pass√©s : <b>{$dateInfo['count']}</b></li>";
                echo "<li>Trajet le plus ancien : <b>{$dateInfo['oldest_date']}</b></li>";
                echo "<li>Dernier trajet termin√© : <b>{$dateInfo['newest_date']}</b></li>";
                echo "</ul>";

                if ($dateInfo['old_trips'] > 0) {
                    echo "<p class='audit-warning'>üí° Suggestion d'archivage :</p>";
                    echo "<ul>";
                    echo "<li>{$dateInfo['old_trips']} trajets ont plus d'un mois</li>";
                    echo "<li>Consid√©rez de les d√©placer vers une table d'archive pour optimiser les performances</li>";
                    echo "</ul>";
                }
            }
            echo "</div></div>";
            echo "</div>";

            // V√©rification des doublons d'emails
            echo "<div class='col-12 mb-3'>";
            echo "<div class='card audit-status audit-success'>";
            echo "<div class='card-body'>";
            echo "<h3>üìß V√©rification des doublons d'emails dans la table 'utilisateurs' :</h3>";

            $stmt = $pdo->query("SELECT email, COUNT(*) as count
                FROM utilisateurs
                GROUP BY email
                HAVING COUNT(*) > 1");

            $duplicateEmails = $stmt->fetchAll();

            if (!empty($duplicateEmails)) {
                echo "<p class='audit-error'>‚ùå Des doublons d'emails ont √©t√© trouv√©s :</p><ul>";
                foreach ($duplicateEmails as $row) {
                    echo "<li>Email: {$row['email']} - Doublons: {$row['count']}</li>";
                }
                echo "</ul>";
                echo "<p class='audit-suggestion'>üí° Suggestion: <code>ALTER TABLE utilisateurs ADD CONSTRAINT unique_email UNIQUE (email);</code></p>";
            } else {
                echo "<p class='audit-success'>‚úÖ Aucun doublon d'email trouv√©.</p>";
            }
            echo "</div></div>";
            echo "</div>";

            // Suggestions de contraintes CHECK
            echo "<div class='col-12 mb-3'>";
            echo "<div class='card audit-status audit-success'>";
            echo "<div class='card-body'>";
            echo "<h3>üîí Suggestions de contraintes CHECK :</h3>";

            echo "<p>Ces contraintes permettraient de garantir la validit√© des donn√©es :</p>";
            echo "<ul>";
            echo "<li>ALTER TABLE trajets ADD CONSTRAINT chk_prix CHECK (prix_personnes >= 0);<br>";
            echo "<small>‚Üí Emp√™che les prix n√©gatifs</small></li>";

            echo "<li>ALTER TABLE trajets ADD CONSTRAINT chk_places CHECK (nb_places >= 0);<br>";
            echo "<small>‚Üí Assure que le nombre de places ne soit pas n√©gatif</small></li>";

            echo "<li>ALTER TABLE reservations ADD CONSTRAINT chk_nb_personnes CHECK (nb_personnes > 0);<br>";
            echo "<small>‚Üí Assure qu'une r√©servation concerne au moins une personne</small></li>";

            echo "<li>ALTER TABLE trajets ADD CONSTRAINT chk_dates CHECK (date_arrive >= date_depart);<br>";
            echo "<small>‚Üí Assure que la date d'arriv√©e soit apr√®s la date de d√©part</small></li>";
            echo "</ul>";
            echo "</div></div>";
            echo "</div>";

            // Validation des donn√©es num√©riques
            echo "<div class='col-12 mb-3'>";
            echo "<div class='card audit-status audit-success'>";
            echo "<div class='card-body'>";
            echo "<h3>üîê Validation des donn√©es num√©riques :</h3>";

            // V√©rification des valeurs n√©gatives
            $stmt = $pdo->query("SELECT id, prix_personnes, nb_places
                FROM trajets
                WHERE prix_personnes < 0");

            $invalidTrajets = $stmt->fetchAll();

            if (!empty($invalidTrajets)) {
                echo "<p class='audit-error'>‚ùå Trajets avec des prix n√©gatifs :</p><ul>";
                foreach ($invalidTrajets as $trajet) {
                    echo "<li>ID: {$trajet['id']} - Prix: {$trajet['prix_personnes']}</li>";
                }
                echo "</ul>";
            } else {
                echo "<p class='audit-success'>‚úÖ Tous les prix sont valides.</p>";
            }

            // V√©rification des r√©servations
            $stmt = $pdo->query("SELECT id, nb_personnes
                FROM reservations
                WHERE nb_personnes <= 0");

            $invalidReservations = $stmt->fetchAll();

            if (!empty($invalidReservations)) {
                echo "<p class='audit-error'>‚ùå R√©servations invalides :</p><ul>";
                foreach ($invalidReservations as $reservation) {
                    echo "<li>ID: {$reservation['id']} - Personnes: {$reservation['nb_personnes']}</li>";
                }
                echo "</ul>";
            } else {
                echo "<p class='audit-success'>‚úÖ Toutes les r√©servations sont valides.</p>";
            }
            echo "</div></div>";
            echo "</div>";

        } catch (PDOException $e) {
            echo "<div class='audit-error'><h4>‚ùå Erreur SQL :</h4>";
            echo "<p><b>Message</b>: " . htmlspecialchars($e->getMessage()) . "</p>";
            echo "<p><b>Code</b>: " . $e->getCode() . "</p>";
            echo "</div>";
        } catch (Exception $e) {
            echo "<div class='audit-error'><h4>‚ùå Erreur g√©n√©rale :</h4>";
            echo "<p><b>Message</b>: " . htmlspecialchars($e->getMessage()) . "</p>";
            echo "<p><b>Code</b>: " . $e->getCode() . "</p>";
            echo "</div>";
        }
   

// Les scores de performance
$performance_scores = [95, 95, 98, 98, 93, 93, 93, 90, 94, 94, 88, 85, 96, 98, 98, 99, 88, 95, 94, 94, 91, 99, 94, 95];
$moyenne_performance = round(array_sum($performance_scores) / count($performance_scores));

// Les scores d'accessibilit√©
$accessibilite_scores = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 96, 100, 100, 100, 100, 96, 100, 100, 100, 100, 100];
$moyenne_accessibilite = round(array_sum($accessibilite_scores) / count($accessibilite_scores));

// Les scores de bonnes pratiques
$bonnes_pratiques_scores = [96, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100];
$moyenne_bonnes_pratiques = round(array_sum($bonnes_pratiques_scores) / count($bonnes_pratiques_scores));

// Les scores de r√©f√©rencement
$referencement_scores = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100];
$moyenne_referencement = round(array_sum($referencement_scores) / count($referencement_scores));
?>

<div class="col-12 mb-3">
    <div class="card audit-status audit-success">
        <div class="card-body">
            <h4>Audit Lighthouse :</h4>
            <p>Voici les r√©sultats moyens de l'audit Lighthouse de votre site.</p>
            
            <table class="table">
                <thead>
                    <tr>
                        <th>Crit√®res</th>
                        <th>Score Moyen</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>üöÄ Performance</td>
                        <td><?= $moyenne_performance ?></td>
                    </tr>
                    <tr>
                        <td>üåê Accessibilit√©</td>
                        <td><?= $moyenne_accessibilite ?></td>
                    </tr>
                    <tr>
                        <td>üõ† Bonnes pratiques</td>
                        <td><?= $moyenne_bonnes_pratiques ?></td>
                    </tr>
                    <tr>
                        <td>üîç R√©f√©rencement naturel</td>
                        <td><?= $moyenne_referencement ?></td>
                    </tr>
                </tbody>
            </table>

            <div class="mt-4">
               <h5>üìà Axes d'am√©lioration identifi√©s :</h5>
               <div class="alert alert-info">
                   <div class="recommendations">
                       <strong>Optimisation des images ‚Äî √âconomie potentielle : 57 Kio</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Convertir les images en format WebP</li>
                           <li>Redimensionner correctement les images selon leur utilisation</li>
                       </ul>

                       <strong>Optimisation du code ‚Äî √âconomie potentielle : 239 Kio de CSS</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Activer la compression de texte (gain potentiel : 57 Kio)</li>
                           <li>R√©duire les ressources CSS inutilis√©es</li>
                           <li>R√©duire les ressources JavaScript inutilis√©es (gain potentiel : 1497 Kio)</li>
                       </ul>

                       <strong>Performance</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>√âliminer les ressources bloquant le rendu (gain : 260 ms)</li>
                           <li>Mettre en place des r√®gles de cache efficaces pour les √©l√©ments statiques</li>
                           <li>√âviter l'utilisation d'ancien code JavaScript dans les navigateurs r√©cents</li>
                       </ul>

                       <strong>Accessibilit√©</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Am√©liorer le contraste des badges pour une meilleure lisibilit√©</li>
                       </ul>
                   </div>
               </div>
           </div>
       </div>
   </div>
</div>

<div class="col-12 mb-3">
   <div class="card audit-status audit-success">
       <div class="card-body">
           <h4>‚úÖ Tests Manuels Effectu√©s :</h4>
           <p>R√©sultats des tests fonctionnels sur les diff√©rents r√¥les utilisateurs.</p>

           <div class="mt-4">
               <div class="alert alert-success">
                   <div class="test-results">
                       <strong>PASSAGER</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Trajet annul√© par passager ‚úì</li>
                           <li>Chercher un trajet qui n'est pas format√© pareil ‚úì</li>
                           <li>Voit le trajet = en_cours ‚úì</li>
                           <li>Re√ßoit le mail du trajet fini pour donner son avis ‚úì</li>
                           <li>Donne son avis sur la page avis.php ‚úì</li>
                           <li>Son avis est disponible dans la page commentaires.php ‚úì</li>
                           <li>Menu en fonction du statut ‚úì</li>
                       </ul>

                       <strong>CONDUCTEUR</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Ne peut pas annuler de trajet non r√©serv√©s ‚úì</li>
                           <li>Trajet r√©serv√© peut √™tre annul√© ‚úì</li>
                           <li>Annulation du trajet = trajet supprim√© ‚úì</li>
                           <li>Lancer le trajet = en_cours + historique mis √† jour ‚úì</li>
                           <li>Termin√© trajet = Trajet dans historique ‚úì</li>
                           <li>Propose un trajet ‚úì</li>
                           <li>Menu en fonction du statut ‚úì</li>
                       </ul>

                       <strong>EMPLOY√â</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Re√ßoit les commentaires dans son dashboard ‚úì</li>
                           <li>Statut commentaires 'en attente' 'valid√©' 'rejet√©' ‚úì</li>
                           <li>Validation du commentaire :</li>
                           <li class="ms-3">- Insertion dans la table "avis" ‚úì</li>
                           <li class="ms-3">- Les cr√©dits sont d√©duits du passager ‚úì</li>
                           <li class="ms-3">- Les cr√©dits sont ajout√©s au conducteur ‚úì</li>
                           <li class="ms-3">- Les cr√©dits sont ajout√©s √† la base Mono (commission) ‚úì</li>
                           <li>Menu en fonction du statut ‚úì</li>
                           <li>Rejet du commentaire :</li>
                           <li class="ms-3">- Mail re√ßu ‚úì</li>
                           <li class="ms-3">- Personne ne re√ßoit de cr√©dit avant la r√©solution ‚úì</li>
                       </ul>

                       <strong>UTILISATEUR (Tous confondus)</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Changer sa photo de profil + ses informations ‚úì</li>
                           <li>Informations.php, le code postal donne la ville ‚úì</li>
                           <li>Ajouter / Supprimer un v√©hicule ‚úì</li>
                           <li>Ajout de 20 cr√©dits automatiques √† l'inscription ‚úì</li>
                       </ul>

                       <strong>ADMIN</strong>
                       <ul class="list-unstyled ms-3 mb-3">
                           <li>Cr√©dit ajout√© par MonGo ‚úì</li>
                           <li>Graphiques cr√©dit √† jour ‚úì</li>
                           <li>Graphique trajets effectu√©s ‚úì</li>
                       </ul>
                   </div>
               </div>
           </div>
       </div>
   </div>
</div>

